/*------------------------------------------------------------------
 * slidhtml.cmd :
 *------------------------------------------------------------------
 * 95/10/06 originally by Patrick J. Mueller
 *------------------------------------------------------------------*/

parse arg parms

if (parms = "?") then
   Usage()

/*------------------------------------------------------------------
 * set defaults
 *------------------------------------------------------------------*/
rc = initializeOptions()

/*------------------------------------------------------------------
 * parse parameter
 *------------------------------------------------------------------*/
parse var parms iFile .

if ("" = iFile) then
   do
   say "Input file not specified."
   exit
   end

if ("" = stream(iFile,"C","QUERY EXISTS")) then
   do
   say "Input file '"iFile"' not found."
   exit
   end

/*------------------------------------------------------------------
 * initialize data
 *------------------------------------------------------------------*/
slide.   = 0
trailer. = 0
state    = ""

/*------------------------------------------------------------------
 * read the file
 *------------------------------------------------------------------*/
do while (eof(iFile) = 0)
   line  = getNextLine(iFile)
   state = processLine(line,state)
end

/*------------------------------------------------------------------
 * generate file names
 *------------------------------------------------------------------*/
iFileBase = translate(iFile,"  ","/\")
iFileBase = word(iFileBase,words(iFileBase))
parse var iFileBase iFileBase "." .

oFile.0 = slide.0
do i = 1 to slide.0
   oFile.i = iFileBase || "-" || right(i,2,"0") || opt.!extension
end

/*------------------------------------------------------------------
 * write each slide
 *------------------------------------------------------------------*/
do i = 1 to slide.0
   rc = writeSlide(i)
end

exit

/*------------------------------------------------------------------
 * write a slide
 *------------------------------------------------------------------*/
writeSlide: procedure expose oFile. slide. trailer. opt.
   slideNo = arg(1)

   /*---------------------------------------------------------------
    * generate links for previous/next pages
    *---------------------------------------------------------------*/
   nextText = "<font size=5>---&gt;&gt;&gt;</font>"
   prevText = "<font size=5>&lt;&lt;&lt;---</font>"

   say "creating file" oFile.slideNo

   first = 1
   last  = oFile.0
   ib = slideNo - 1
   ia = slideNo + 1

   leftRef = ""
   riteRef = ""

   if (ib > 0) then
      leftRef = '<a href="'oFile.ib'">'prevText'</a>'
   else
      leftRef = '<a href="'oFile.last'">'prevText'</a>'

   if (ia <= slide.0) then
      riteRef = '<a href="'oFile.ia'">'nextText'</a>'
   else
      riteRef = '<a href="'oFile.first'">'nextText'</a>'

   riteRef = riteRef '<br>Page' slideNo

   /*---------------------------------------------------------------
    * erase existing file
    *---------------------------------------------------------------*/
   rc = erase(oFile.slideNo)

   /*---------------------------------------------------------------
    * start writing it out!
    *---------------------------------------------------------------*/
   eof   = d2c(26)
   line. = eof

   line.1  = '<!--  Warning Warning Warning Warning Warning Warning Warning Warning  -->'
   line.2  = '<!--     Warning Warning Warning Warning Warning Warning Warning       -->'
   line.3  = '<!--  Warning Warning Warning Warning Warning Warning Warning Warning  -->'
   line.4  = ''
   line.5  = '<!--    Do not edit this file!  It was generated from a template       -->'
   line.6  = '<!--    and changes will be lost next time it''s generated             -->'
   line.7  = ''
   line.8  = '<!--  Warning Warning Warning Warning Warning Warning Warning Warning  -->'
   line.9  = '<!--     Warning Warning Warning Warning Warning Warning Warning       -->'
   line.10 = '<!--  Warning Warning Warning Warning Warning Warning Warning Warning  -->'
   line.11 = ''
   line.12 = '<html>'
   line.13 = '<head>'
   line.14 = '<title>'slide.slideNo.!title'</title>'
   line.15 = '</head>'
   line.16 = '<body>'
   line.17 = '<table width="100%">'
   line.18 = '<tr>'
   line.19 = '<td align=left valign=top>'leftRef'</td>'
   line.20 = '<td align=center><h1>'slide.slideNo.!title'</h1></td>'
   line.21 = '<td align=right valign=top>'riteRef'</td>'
   line.22 = '</tr>'
   line.23 = '</table>'
   line.24 = '<hr>'

   do i = 1 by 1 while (line.i <> eof)
      rc = lineout(oFile.slideNo,line.i)
   end

   rc = lineout(oFile.slideNo,'<font size="'opt.!fontSize'">')
   do i = 1 to slide.slideNo.0
      rc = lineout(oFile.slideNo,slide.slideNo.i)
   end
   rc = lineout(oFile.slideNo,'</font>')

   do i = 1 to trailer.0
      rc = lineout(oFile.slideNo,trailer.i)
   end

   rc = lineout(oFile.slideNo,"</body>")
   rc = lineout(oFile.slideNo,"</html>")

   rc = lineout(oFile.slideNo)
   return ""

/*------------------------------------------------------------------
 *
 *------------------------------------------------------------------*/
processLine: procedure expose slide. trailer.
   line  = arg(1)
   state = arg(2)

   /*---------------------------------------------------------------
    * check to see if we have a :trailer or :slide line
    *---------------------------------------------------------------*/
   word1 = firstUpperWord(line,1)
   char1 = firstChar(line)
   rest  = subword(line,2)

   /*---------------------------------------------------------------
    * if we do, set the state, update counters (for slide)
    *---------------------------------------------------------------*/
   if (char1 = ":") then
      do
      if (word1 = ":TRAILER") then
         do
         state = "trailer"
         end

      else if (word1 = ":SLIDE") then
         do
         state = "slide"
         o = slide.0 + 1
         slide.0 = o
         slide.o.0 = 0
         slide.o.!title = rest
         end

      return state
      end

   /*---------------------------------------------------------------
    * if not a separator, add line to apropriate place
    *---------------------------------------------------------------*/
   if (state = "trailer") then
      do
      o = trailer.0 + 1
      trailer.0 = o
      trailer.o = line
      end

   else if (state = "slide") then
      do
      o1 = slide.0
      o2 = slide.o1.0 + 1
      slide.o1.0 = o2
      slide.o1.o2 = line
      end

   return state

/*------------------------------------------------------------------
 * get next line (and handle directives inline)
 *------------------------------------------------------------------*/
getNextLine: procedure expose opt. slide. trailer.
   iFile = arg(1)

   if (chars(iFile) <= 0) then
      return ""

   line = linein(iFile)
   if (firstChar(line) <> ":") then
      return line

   word1 = firstUpperWord(line)
   word2 = word(line,2)

   if (word1 = ":SLIDE") | (word1 = ":TRAILER") then
      return line

   if (word1 = ":EXTENSION")  then opt.!extension = word2
   if (word1 = ":FONTSIZE")   then opt.!fontSize  = word2

   return ""

/*------------------------------------------------------------------
 * return uppercased first word of a line
 *------------------------------------------------------------------*/
firstUpperWord: procedure
   string = arg(1)

   return translate(word(arg(1),1))

/*------------------------------------------------------------------
 * return first char of a line
 *------------------------------------------------------------------*/
firstChar: procedure
   string = arg(1)

   return substr(word(arg(1),1),1,1)

/*------------------------------------------------------------------
 * end of file?
 *------------------------------------------------------------------*/
eof: procedure
   iFile = arg(1)

   return (chars(iFile) <= 0)

/*------------------------------------------------------------------
 * end of file?
 *------------------------------------------------------------------*/
erase: procedure
   fileName = arg(1)

   parse source os how me .
   if (os = "OS/2") then
      "@erase" fileName "1>nul 2>nul"

   else if (os = "WIN") then
      rc = DosDel(fileName)

   return ""

/*------------------------------------------------------------------
 * initialize options
 *------------------------------------------------------------------*/
initializeOptions: procedure expose opt.
   opt.           = ""
   opt.!extension = ".htm"
   opt.!fontSize  = 5

   return ""

/*------------------------------------------------------------------
 * some simple help
 *------------------------------------------------------------------*/
Usage: procedure
   parse source . . me .
   parse value filespec("name",me) with me "." .

   say "usage:"
   say "   " me "<fileName>"
   say "is used to create HTML files from SLIDHTML files."
   say

   exit

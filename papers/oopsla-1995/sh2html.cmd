/*------------------------------------------------------------------
 * sh2html.cmd :
 *------------------------------------------------------------------
 * 95/10/06 originally by Patrick J. Mueller
 *------------------------------------------------------------------*/

parse arg parms

if (parms = "?") then
   Usage()

/*------------------------------------------------------------------
 * separate parms and options
 *------------------------------------------------------------------*/
opts     = ""
newParms = ""
do while (parms <> "")
   parse var parms parm parms
   if (substr(parm,1,1) = "-") then
      opts = opts parm
   else
      newParms = newParms parm
end

opts  = space(opts)
parms = space(newParms)

/*------------------------------------------------------------------
 * process options
 *------------------------------------------------------------------*/
optPages = 1
optLinks = 0
optLinkL = "l_hand.gif"
optLinkR = "r_hand.gif"
do while (opts <> "")
   parse var opts opt opts
   parse upper var opt "-" opt
   c1 = substr(opt,1,1)
   cr = substr(opt,2)

   if (c1 = "P") then optPages = (cr = "+")
   if (c1 = "L") then optLinks = (cr = "+")
   if (cl = "B") then
      parse var cr optLinkL "," optLinkR
end

/*------------------------------------------------------------------
 * process parameters
 *------------------------------------------------------------------*/
parse var parms listFile .

if (listFile = "") then
   listFile = "toc.lst"

if ("" = stream(listFile,"C","QUERY EXISTS")) then
   do
   say "List file '"listFile"' not found."
   exit
   end

file.0 = 0
trailer = ""
do while (lines(listFile) > 0)
   line = space(linein(listFile))
   if (line = "") | (substr(line,1,1) = "#") then
      iterate

   parse var line file rest
   if (file = "trailer") then
      do
      trailer = word(rest,1)
      iterate
      end

   if (pos(".HTML",translate(file)) > 0) then
      do
      say "Files specified in the listfile must not have an .html extension."
      exit
      end

   if ("" = stream(file,"C","QUERY EXISTS")) then
      do
      say "File '"file"' not found."
      exit
      end

   parse var file fileBase "."

   o = file.0 + 1
   file.0  = o
   file.o  = file
   oFile.o = fileBase".html"
end

/*------------------------------------------------------------------
 * get trailer
 *------------------------------------------------------------------*/
if (trailer = "") then
   trailerText = ""
else
   trailerText = getTextOfFile(trailer)

/*------------------------------------------------------------------
 * write each file
 *------------------------------------------------------------------*/
do i = 1 to file.0
   say "creating file" oFile.i

   oFileText = getTextOfFile(file.i)

   parse var oFileText "<!--" "title:" title.i "-->" .
   title.i = space(title.i)
   if (title.i = "") then
      title.i = file.i

   ib = i - 1
   ia = i + 1

   leftRef = ""
   riteRef = ""

   if (ib > 0) then
      leftRef = '<a href="'oFile.ib'"><img src="'optLinkL'"></a>'

   if (ia <= file.0) then
      riteRef = '<a href="'oFile.ia'"><img src="'optLinkR'"></a>'

   "@erase" oFile.i "1>nul 2>nul"

   rc = lineout(oFile.i,'<!--  Warning Warning Warning Warning Warning Warning Warning Warning  -->')
   rc = lineout(oFile.i,'<!--     Warning Warning Warning Warning Warning Warning Warning       -->')
   rc = lineout(oFile.i,'<!--  Warning Warning Warning Warning Warning Warning Warning Warning  -->')
   rc = lineout(oFile.i,' ')
   rc = lineout(oFile.i,'<!--    Do not edit this file!  It was generated from a template       -->')
   rc = lineout(oFile.i,' ')
   rc = lineout(oFile.i,'<!--  Warning Warning Warning Warning Warning Warning Warning Warning  -->')
   rc = lineout(oFile.i,'<!--     Warning Warning Warning Warning Warning Warning Warning       -->')
   rc = lineout(oFile.i,'<!--  Warning Warning Warning Warning Warning Warning Warning Warning  -->')
   rc = lineout(oFile.i,' ')
   rc = lineout(oFile.i,'<html>')
   rc = lineout(oFile.i,'<head>')
   rc = lineout(oFile.i,'<title>'title.i'</title>')
   rc = lineout(oFile.i,'</head>')
   rc = lineout(oFile.i,'<body>')
   rc = lineout(oFile.i,'<h1>'title.i'</h1>')

   if optLinks then
      do
      rc = lineout(oFile.i,'<table width="100%">')
      rc = lineout(oFile.i,'<tr>')
      rc = lineout(oFile.i,'<td align=left>'leftRef'</td>')
      rc = lineout(oFile.i,'<td align=right>'riteRef'</td>')
      rc = lineout(oFile.i,'</tr>')
      rc = lineout(oFile.i,'</table>')
      end

   rc = lineout(oFile.i,'<hr>')

   rc = charout(oFile.i,oFileText)
   rc = lineout(oFile.i,"")

   if optPages then
      do
      rc = lineout(oFile.i,'<table width="100%">')
      rc = lineout(oFile.i,'<tr>')
      rc = lineout(oFile.i,'<td align=right>Page' i'</td>')
      rc = lineout(oFile.i,'</tr>')
      rc = lineout(oFile.i,'</table>')
      rc = lineout(oFile.i)
      end

   if (trailer <> "") then
      rc = charout(oFile.i,trailerText)

   rc = lineout(oFile.i)
end

/*------------------------------------------------------------------
 * write toc.html file
 *------------------------------------------------------------------*/
oFile = "toc.html"
"@erase" oFile "1>nul 2>nul"
rc = lineout(oFile,"<html>")
rc = lineout(oFile,"<head>")
rc = lineout(oFile,"<title>Table of contents</title>")
rc = lineout(oFile,"</head>")
rc = lineout(oFile,"<body>")

do i = 1 to file.0
   ref = '<a href="'oFile.i'">'
   rc = lineout(oFile,'<p>'ref || title.i'</a>')
end

rc = lineout(oFile,"</body>")
rc = lineout(oFile,"</html>")


exit

/*------------------------------------------------------------------
 * getTextOfFile
 *------------------------------------------------------------------*/
getTextOfFile: procedure
   fileName = arg(1)

   bytes = stream(fileName,"C","QUERY SIZE")
   if (bytes = "") | (bytes = 0) then
      return ""

   text = charin(fileName,,bytes)
   rc   = stream(fileName,"C","CLOSE")

   return text

/*------------------------------------------------------------------
 * some simple help
 *------------------------------------------------------------------*/
Usage: procedure
   parse source . . me .
   parse value filespec("name",me) with me "." .

   say "usage:"
   say "   " me "<options> <tocFile>"
   say "is used to create HTML files from SHTML files."
   say
   say "where:"
   say "   tocFile - the table of contents file.  This file contains"
   say "             lines of the form {fileName}.  The fileName"
   say "             'trailer' can be used to specify a common trailer"
   say "             for each generated page, the name of the trailer file"
   say "             should follow the token 'trailer'. Default is 'toc.lst'"
   say
   say "   options -"
   say "      -p{+|-}      indicates whether to generate page numbers.  Default: -"
   say "      -l{+|-}      indicates whether to generate next/prev links.  Default: +"
   say "      -bleft,right indicates the images to use for next/prev links."
   say "                   Default: l_hand.gif,r_hand.gif"
   say
   say "This program reads base files containing HTML, and generates new HTML"
   say "files based on them.  The output files will be the same name as the"
   say "input files, but with an .html extension.  A common trailer can"
   say "be specified, or each file can contain appropriate closing HTML,"
   say "which should be everything from </body> to </html>."
   say
   say "In addition, a separate file named 'toc.html' will be generated as"
   say "the table of contents for these files."

   exit
